<?php
namespace Nano\SchemaLive;

use Doctrine\DBAL\DriverManager;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-09-11 at 00:48:31.
 */
class BuilderTest extends TestCase
{

    /**
     * @var \Doctrine\DBAL\Connection $connection
     */
    private $connection;

    /**
     * @var Builder
     */
    private $builder;

    /**
     * @var \Doctrine\DBAL\Schema\AbstractSchemaManager $schema
     */
    private $schema;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $params = array(
            'driver' => getenv('driver') ?: 'pdo_mysql',
            'host' => getenv('host') ?: '127.0.0.1',
            'user' => getenv('user') ?: 'root',
            'password' => getenv('password') ?: '',
            'port' => getenv('port') ?: '3306',
            'url' => '/' . (getenv('database') ?: 'formularios'),
        );
        $this->connection = DriverManager::getConnection($params);
        $this->connection;
        $this->schema = $this->connection->getSchemaManager();
        $this->builder = new Builder($this->schema);
    }

    public function testConfigurationStructure()
    {
        $configuration = $this->builder->getConfiguration();
        $this->assertArrayHasKey('fields', $configuration);
        $this->assertArrayHasKey('relationships', $configuration);
        foreach ($configuration['fields'] as $table) {
            $this->assertArrayHasKey('fillable', $table);
            $this->assertArrayHasKey('guarded', $table);
            $this->assertArrayHasKey('casts', $table);
            $this->assertArrayHasKey('rules', $table);
        }
        foreach ($configuration['relationships'] as $table) {
            foreach ($table as $relationship) {
                $this->assertArrayHasKey(0, $relationship);
                $this->assertArrayHasKey(1, $relationship);
                $this->assertEquals('string', gettype($relationship[0]));
                $this->assertEquals('array', gettype($relationship[1]));
            }
        }
    }
}
